name: Check examples

on:
  push:
    branches-ignore:
      - 'dependabot/**'
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  check:
    runs-on: ubuntu-latest

    strategy:
      fail-fast: false
      matrix:
        example: ['blog', 'package-docs', 'textbook']


    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install elan
        run: |
          set -o pipefail
          curl -sSfL https://github.com/leanprover/elan/releases/download/v4.1.2/elan-x86_64-unknown-linux-gnu.tar.gz | tar xz
          ./elan-init -y --default-toolchain none
          echo "$HOME/.elan/bin" >> "$GITHUB_PATH"


      - name: Compute cache keys
        id: cache-keys
        run: |
          TOOLCHAIN=$(find ${{ matrix.example }} -name 'lean-toolchain' -type f | grep -v '\.lake' | sort | xargs cat | tr -d '[:space:]' | sha256sum | cut -d' ' -f1)

          LAKEFILE=""
          find ${{ matrix.example }} -name 'lakefile.*' -type f | grep -v '\.lake' | sort | while read -r file; do
            filename=$(echo "$file" | sed 's|^\./||')
            file_hash=$(cat "$file" | sha256sum | cut -d' ' -f1)
            LAKEFILE="${LAKEFILE}-${filename}-${file_hash}"
          done

          LAKE_MANIFESTS=""
          find ${{ matrix.example }} -name 'lake-manifest.json' -type f | grep -v '\.lake' | sort | while read -r file; do
            filename=$(echo "$file" | sed 's|^\./||')
            file_hash=$(cat "$file" | sha256sum | cut -d' ' -f1)
            LAKE_MANIFESTS="${LAKE_MANIFESTS}-${filename}-${file_hash}"
          done


          echo "toolchain=$TOOLCHAIN" >> $GITHUB_OUTPUT
          echo "lakefile=$LAKEFILE" >> $GITHUB_OUTPUT
          echo "manifests=$LAKE_MANIFESTS" >> $GITHUB_OUTPUT

      - name: Set cache paths
        id: cache-paths
        run: |
          paths=$(find ${{ matrix.example }} -name '.lake' -type d ! -path '*/.lake/*' | sort)
          echo "paths<<EOF" >> $GITHUB_OUTPUT
          echo "$paths" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Cache .lake
        uses: actions/cache@v4
        with:
          path: ${{ steps.cache-paths.outputs.paths }}
          key: ${{ runner.os }}-${{ steps.cache-keys.outputs.toolchain }}-${{ steps.cache-keys.outputs.lakefile }}-${{ steps.cache-keys.outputs.manifests }}

      - name: Build ${{ matrix.example }}
        run: |
          cd ${{ matrix.example }}
          # If in the package-docs example, go one more level down
          if [ -d "manual" ] && [ ! -f "lean-toolchain" ]; then
            cd manual
          fi
          lake build

      - name: Set upload paths
        id: upload-paths
        run: |
          cd $GITHUB_WORKSPACE

          lake_dirs=$(find ${{ matrix.example }} -name '.lake' -type d ! -path '*/.lake/*' | sort)

          echo "paths<<EOF" >> $GITHUB_OUTPUT
          echo "$lake_dirs" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Upload results
        uses: actions/upload-artifact@v4
        with:
          name: example-${{ matrix.example }}-results
          path: ${{ steps.upload-paths.paths }}
          retention-days: 1

  generate:
    needs: check
    runs-on: ubuntu-latest
    steps:

      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: command-*-results
          merge-multiple: true

      - name: display all .lake
        run: |
          find . -name .lake

      - name: Generate content
        run: ./generate.sh
